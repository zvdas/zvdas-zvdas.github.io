{
    "project":[
        {
            "project_name": "Online Test Application",
            "problem": "<strong>Description</strong><p>The Online Test Application system creates an application that enables users to provide online tests, review them, and display the results.</p><strong>System Details:</strong><p>This system contains three main modules: Quiz, Review, and Result. The quiz section of the online test application accepts the questions in JSON format. The JSON file can be easily shared from the server in the pre-defined format. The application renders the test at the client-side.<p>",
            "screenshots":[
                "https://raw.githubusercontent.com/zvdas/OnlineTestApp/master/screenshots/screenshot_02.png",
                "https://raw.githubusercontent.com/zvdas/OnlineTestApp/master/screenshots/screenshot_05.png",
                "https://raw.githubusercontent.com/zvdas/OnlineTestApp/master/screenshots/screenshot_06.png",
                "https://raw.githubusercontent.com/zvdas/OnlineTestApp/master/screenshots/screenshot_08.png",
                "https://raw.githubusercontent.com/zvdas/OnlineTestApp/master/screenshots/screenshot_09.png",
                "https://raw.githubusercontent.com/zvdas/OnlineTestApp/master/screenshots/screenshot_10.png",
                "https://raw.githubusercontent.com/zvdas/OnlineTestApp/master/screenshots/screenshot_11.png",
                "https://raw.githubusercontent.com/zvdas/OnlineTestApp/master/screenshots/screenshot_13.png",
                "https://raw.githubusercontent.com/zvdas/OnlineTestApp/master/screenshots/screenshot_14.png",
                "https://raw.githubusercontent.com/zvdas/OnlineTestApp/master/screenshots/screenshot_15.png",
                "https://raw.githubusercontent.com/zvdas/OnlineTestApp/master/screenshots/screenshot_16.png",
                "https://raw.githubusercontent.com/zvdas/OnlineTestApp/master/screenshots/screenshot_19.png",
                "https://raw.githubusercontent.com/zvdas/OnlineTestApp/master/screenshots/screenshot_20.png",
                "https://raw.githubusercontent.com/zvdas/OnlineTestApp/master/screenshots/screenshot_21.png",
                "https://raw.githubusercontent.com/zvdas/OnlineTestApp/master/screenshots/screenshot_22.png",
                "https://raw.githubusercontent.com/zvdas/OnlineTestApp/master/screenshots/screenshot_23.png"

            ],
            "code": "<script src='https://gist.github.com/zvdas/9ad202f8ec1e13b1fa9ba7a05695bb7f.js'></script>",
            "procedure": "<p><strong>Step 1 : Create an angular application</strong><br/>To create a new angular project in a specific folder, open terminal inside that folder and type<br/><code>ng new OnlineTestApp<br/>Would you like to add Angular routing? (y/N) y<br/>Which stylesheet format would you like to use? (Use arrow keys)<br/>> CSS</code><br/>to execute an angular project<br/><code>ng serve</code><br/>An angular app page will be created on localhost:4200. Paste the link in the browser to view.</p><p><strong>Step 2 : Create the quiz file to host on JSON server (fake API)</strong><br/>Create a json server with 10 questions. (A json linter can be used or a csv file to json online converter).  Install a json server to host the databases for participants, the quiz questions and answers and participant answers. Create a pipe for indexing the quiz to display individual results per page. In the quiz ts file, while posting the participant answers to the database, a formula will be used to check whether the answers are correct or incorrect for each question.</p><p><strong>Step 3 : Install required dependencies for the project</strong><br/>Generate the project dependencies (components, services, pipes) using angular CLI.<br/><code>ng g component register<br/>ng g c navbar<br/>ng g c quiz<br/>ng g c result<br/>ng g c error<br/>ng g service services/databases<br/>ng g pipes pipes/StringToNumber</code><br/>Install the JSON server using npm and host the files on different ports.<br/>Note: all files can be hosted on the same port as sub links eg: http://localhost:3000/participant, http://localhost:3000/quiz, http://localhost:3000/answer. However for easy visibility and less congestion during demonstration, separate ports have been used for each file.<br/><code data-gist-id='9ad202f8ec1e13b1fa9ba7a05695bb7f' data-gist-file='quiz.json'></code><code>npm install --save json-server<br/>json-server --watch --port 3000 database-files/participant.json<br/>json-server --watch --port 4000 database-files/quiz.json<br/>json-server --watch --port 5000 database-files/answer.json</code><br/>Install angular material for custom icons from material.angular.io.<br/><code>ng add @angular/material</code><br/>Install bootstrap for Responsive Web Design (RWD)<br/><code>npm install --save bootstrap</code><br/>Install countdown timer (not mandatory to project requirements)<br/><code>npm install ngx-countdown --save</code></p><p><strong>Step 4: Routing</strong><br/>Add routes to the app routing module so that links clicked can redirect to required pages as well as blank and wildcard for empty pages. Export the app routing module to app module so that the routes function properly. Also add router outlet tag to the app html component so that all the children components can be added to the same page.<code data-gist-id='9ad202f8ec1e13b1fa9ba7a05695bb7f' data-gist-file='app-routing.module.ts'></code><code data-gist-id='9ad202f8ec1e13b1fa9ba7a05695bb7f' data-gist-file='app.module.ts'></code><code data-gist-id='9ad202f8ec1e13b1fa9ba7a05695bb7f' data-gist-file='app.component.html'></code></p><p><strong>Step 6 : MVC (Model-View-Controller) pattern - Model</strong><br/>Create a ts (TypeScript) file for each of the json files to be used as databases, so that the classes to be exported can be mapped to the object (i.e.) define name, email, username and password for the participant.<br/><code data-gist-id='9ad202f8ec1e13b1fa9ba7a05695bb7f' data-gist-file='participant.ts'></code><code data-gist-id='9ad202f8ec1e13b1fa9ba7a05695bb7f' data-gist-file='answer.ts'></code><code data-gist-id='9ad202f8ec1e13b1fa9ba7a05695bb7f' data-gist-file='quiz.ts'></code></p><p><strong>Step 7 : Create Service for posting to and reading from database (fake JSON server APIs)</strong><br/>Define functions to send and retrieve fields to and from the databases using HTTP Client.<br/><code data-gist-id='9ad202f8ec1e13b1fa9ba7a05695bb7f' data-gist-file='database.service.ts'></code></p><p><strong>Step 8 : MVC pattern - Controllers (.ts files) and Views (.html files)</strong><br/><strong><u>Register Component</u></strong><br/>Create the register component using reactive and angular forms to enable one way communication from model to view so that data fed into the registration form can be sent to the database and create a function to route the webpage to quiz once the “Start quiz” button is clicked.<br/><code data-gist-id='9ad202f8ec1e13b1fa9ba7a05695bb7f' data-gist-file='register.component.ts'></code><code data-gist-id='9ad202f8ec1e13b1fa9ba7a05695bb7f' data-gist-file='register.component.html'></code><strong><u>Navbar Component</u></strong><br/>Create a navbar component which will display the name of the person taking the quiz (fed from registration page), the date and time.<code data-gist-id='9ad202f8ec1e13b1fa9ba7a05695bb7f' data-gist-file='navbar.component.ts'></code><code data-gist-id='9ad202f8ec1e13b1fa9ba7a05695bb7f' data-gist-file='navbar.component.html'></code><br/><strong><u>Quiz Component</u></strong><br/>Create functions in the quiz component to get the quiz data from the database and display in the webpage, one question at a time using for loop with indexing. Create an index staring with 0 with end 9 (10 questions) and use increments with (click) to increment the questions one at a time. While sending the answers clicked by the participant, a formula will check whether the participant answer matches the answer in the quiz database to determine whether it is correct or incorrect. The result will be sent to the database along with the answer selected.<br/><code data-gist-id='9ad202f8ec1e13b1fa9ba7a05695bb7f' data-gist-file='quiz.component.ts'></code><code data-gist-id='9ad202f8ec1e13b1fa9ba7a05695bb7f' data-gist-file='quiz.component.html'></code><strong><u>Result Component</u></strong><br/>The result will be displayed on the screen with a review section below so that each question can be reviewed one at a time, scrolled using the same concept of for loop with indexing mentioned earlier. There will also be an option to retake the quiz.<br/><code data-gist-id='9ad202f8ec1e13b1fa9ba7a05695bb7f' data-gist-file='result.component.ts'></code><code data-gist-id='9ad202f8ec1e13b1fa9ba7a05695bb7f' data-gist-file='result.component.html'></code><strong><u>Error Component</u></strong><br/>In case of an error while typing the url, the page will route to an information page displaying the error and suggesting workarounds.<br/><code data-gist-id='9ad202f8ec1e13b1fa9ba7a05695bb7f' data-gist-file='error.component.html'></code></p>"
        },
        {
            "project_name": "Building a Blog App in Angular",
            "problem": "<strong>Description:</strong><p>Build an Angular app where users can read and add blog posts.</p><strong>Background of the problem statement:</strong><p>You are a web developer at a company that provides web solutions. The company was approached by a client to build a food blog app where users can read, write, edit, or delete new and existing posts. During sprint planning, you agree to lead this project and develop the frontend using Angular. The backend developers have agreed to provide you with the required APIs to perform CRUD operations on the data. The tasks you are responsible for include:</p><ul><li>Designing the app in Angular</li><li>Creating routes for navigation between Angular pages and components</li><li>Creating service for accessing REST API</li><li>Setting up a JSON server for testing until backend APIs are ready</li><li>Testing the application</li></ul><strong>You must use the following tools:</strong><ul><li>Angular: To build the application</li><li>NgModules: To configure the injector and the compiler and organize related components</li><li>JSON Server: To build a placeholder backend for app development and testing</li><li>Angular Router: To navigate within the app using URL links</li><li>Jasmine/Karma: To test the application</li></ul><strong>Following requirements should be met:</strong><ul><li>he app should be responsive.</li><li>The app should have functionalities for users to create, view, update, and delete posts.</li><li>The app should have a contact form, a header, and a nav component.</li></ul>",
            "screenshots": [],
            "code": "",
            "procedure": ""
        }
    ]
}