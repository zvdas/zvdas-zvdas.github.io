{
    "project":[
        {
            "project_name": "Online Test Application",
            "problem": "<p><strong>Description</strong></p><p>The Online Test Application system creates an application that enables users to provide online tests, review them, and display the results.</p><strong>System Details:</strong><p>This system contains three main modules: Quiz, Review, and Result. The quiz section of the online test application accepts the questions in JSON format. The JSON file can be easily shared from the server in the pre-defined format. The application renders the test at the client-side.<p>",
            "message": "<p class='text-white'>Click <a class='text-white' href='https://onlinetestapp-1e50c.web.app'><b>here</b></a> to go to the project online test application.</p>",
            "screenshots":[
                "https://raw.githubusercontent.com/zvdas/OnlineTestApp/master/screenshots/screenshot_02.png",
                "https://raw.githubusercontent.com/zvdas/OnlineTestApp/master/screenshots/screenshot_05.png",
                "https://raw.githubusercontent.com/zvdas/OnlineTestApp/master/screenshots/screenshot_06.png",
                "https://raw.githubusercontent.com/zvdas/OnlineTestApp/master/screenshots/screenshot_08.png",
                "https://raw.githubusercontent.com/zvdas/OnlineTestApp/master/screenshots/screenshot_09.png",
                "https://raw.githubusercontent.com/zvdas/OnlineTestApp/master/screenshots/screenshot_10.png",
                "https://raw.githubusercontent.com/zvdas/OnlineTestApp/master/screenshots/screenshot_11.png",
                "https://raw.githubusercontent.com/zvdas/OnlineTestApp/master/screenshots/screenshot_13.png",
                "https://raw.githubusercontent.com/zvdas/OnlineTestApp/master/screenshots/screenshot_14.png",
                "https://raw.githubusercontent.com/zvdas/OnlineTestApp/master/screenshots/screenshot_15.png",
                "https://raw.githubusercontent.com/zvdas/OnlineTestApp/master/screenshots/screenshot_16.png",
                "https://raw.githubusercontent.com/zvdas/OnlineTestApp/master/screenshots/screenshot_19.png",
                "https://raw.githubusercontent.com/zvdas/OnlineTestApp/master/screenshots/screenshot_20.png",
                "https://raw.githubusercontent.com/zvdas/OnlineTestApp/master/screenshots/screenshot_21.png",
                "https://raw.githubusercontent.com/zvdas/OnlineTestApp/master/screenshots/screenshot_22.png",
                "https://raw.githubusercontent.com/zvdas/OnlineTestApp/master/screenshots/screenshot_23.png"

            ],
            "code": "<head><script src='https://gist.github.com/zvdas/9ad202f8ec1e13b1fa9ba7a05695bb7f.js'></script></head><body></body>",
            "code1": "<head><script>type='text/javascript' src='https://cdn.jsdelivr.net/npm/gist-embed@1.0.4/dist/gist-embed.min.js'</script></head><body><code data-gist-id='9ad202f8ec1e13b1fa9ba7a05695bb7f'></code><body>",
            "procedure": "<p><strong>Step 1 : Create an angular application</strong><br/>To create a new angular project in a specific folder, open terminal inside that folder and type<br/><code>ng new OnlineTestApp<br/>Would you like to add Angular routing? (y/N) y<br/>Which stylesheet format would you like to use? (Use arrow keys)<br/>> CSS</code><br/>to execute an angular project<br/><code>ng serve</code><br/>An angular app page will be created on localhost:4200. Paste the link in the browser to view.</p><p><strong>Step 2 : Create the quiz file to host on JSON server (fake API)</strong><br/>Create a json server with 10 questions. (A json linter can be used or a csv file to json online converter).  Install a json server to host the databases for participants, the quiz questions and answers and participant answers. Create a pipe for indexing the quiz to display individual results per page. In the quiz ts file, while posting the participant answers to the database, a formula will be used to check whether the answers are correct or incorrect for each question.</p><p><strong>Step 3 : Install required dependencies for the project</strong><br/>Generate the project dependencies (components, services, pipes) using angular CLI.<br/><code>ng g component register<br/>ng g c navbar<br/>ng g c quiz<br/>ng g c result<br/>ng g c error<br/>ng g service services/databases<br/>ng g pipes pipes/StringToNumber</code><br/>Install the JSON server using npm and host the files on different ports.<br/>Note: all files can be hosted on the same port as sub links eg: http://localhost:3000/participant, http://localhost:3000/quiz, http://localhost:3000/answer. However for easy visibility and less congestion during demonstration, separate ports have been used for each file.<br/><code data-gist-id='9ad202f8ec1e13b1fa9ba7a05695bb7f' data-gist-file='quiz.json'></code><code>npm install --save json-server<br/>json-server --watch --port 3000 database-files/participant.json<br/>json-server --watch --port 4000 database-files/quiz.json<br/>json-server --watch --port 5000 database-files/answer.json</code><br/>Install angular material for custom icons from material.angular.io.<br/><code>ng add @angular/material</code><br/>Install bootstrap for Responsive Web Design (RWD)<br/><code>npm install --save bootstrap</code><br/>Install countdown timer (not mandatory to project requirements)<br/><code>npm install ngx-countdown --save</code></p><p><strong>Step 4: Routing</strong><br/>Add routes to the app routing module so that links clicked can redirect to required pages as well as blank and wildcard for empty pages. Export the app routing module to app module so that the routes function properly. Also add router outlet tag to the app html component so that all the children components can be added to the same page.<code data-gist-id='9ad202f8ec1e13b1fa9ba7a05695bb7f' data-gist-file='app-routing.module.ts'></code><code data-gist-id='9ad202f8ec1e13b1fa9ba7a05695bb7f' data-gist-file='app.module.ts'></code><code data-gist-id='9ad202f8ec1e13b1fa9ba7a05695bb7f' data-gist-file='app.component.html'></code></p><p><strong>Step 6 : MVC (Model-View-Controller) pattern - Model</strong><br/>Create a ts (TypeScript) file for each of the json files to be used as databases, so that the classes to be exported can be mapped to the object (i.e.) define name, email, username and password for the participant.<br/><code data-gist-id='9ad202f8ec1e13b1fa9ba7a05695bb7f' data-gist-file='participant.ts'></code><code data-gist-id='9ad202f8ec1e13b1fa9ba7a05695bb7f' data-gist-file='answer.ts'></code><code data-gist-id='9ad202f8ec1e13b1fa9ba7a05695bb7f' data-gist-file='quiz.ts'></code></p><p><strong>Step 7 : Create Service for posting to and reading from database (fake JSON server APIs)</strong><br/>Define functions to send and retrieve fields to and from the databases using HTTP Client.<br/><code data-gist-id='9ad202f8ec1e13b1fa9ba7a05695bb7f' data-gist-file='database.service.ts'></code></p><p><strong>Step 8 : MVC pattern - Controllers (.ts files) and Views (.html files)</strong><br/><strong><u>Register Component</u></strong><br/>Create the register component using reactive and angular forms to enable one way communication from model to view so that data fed into the registration form can be sent to the database and create a function to route the webpage to quiz once the “Start quiz” button is clicked.<br/><code data-gist-id='9ad202f8ec1e13b1fa9ba7a05695bb7f' data-gist-file='register.component.ts'></code><code data-gist-id='9ad202f8ec1e13b1fa9ba7a05695bb7f' data-gist-file='register.component.html'></code><strong><u>Navbar Component</u></strong><br/>Create a navbar component which will display the name of the person taking the quiz (fed from registration page), the date and time.<code data-gist-id='9ad202f8ec1e13b1fa9ba7a05695bb7f' data-gist-file='navbar.component.ts'></code><code data-gist-id='9ad202f8ec1e13b1fa9ba7a05695bb7f' data-gist-file='navbar.component.html'></code><br/><strong><u>Quiz Component</u></strong><br/>Create functions in the quiz component to get the quiz data from the database and display in the webpage, one question at a time using for loop with indexing. Create an index staring with 0 with end 9 (10 questions) and use increments with (click) to increment the questions one at a time. While sending the answers clicked by the participant, a formula will check whether the participant answer matches the answer in the quiz database to determine whether it is correct or incorrect. The result will be sent to the database along with the answer selected.<br/><code data-gist-id='9ad202f8ec1e13b1fa9ba7a05695bb7f' data-gist-file='quiz.component.ts'></code><code data-gist-id='9ad202f8ec1e13b1fa9ba7a05695bb7f' data-gist-file='quiz.component.html'></code><strong><u>Result Component</u></strong><br/>The result will be displayed on the screen with a review section below so that each question can be reviewed one at a time, scrolled using the same concept of for loop with indexing mentioned earlier. There will also be an option to retake the quiz.<br/><code data-gist-id='9ad202f8ec1e13b1fa9ba7a05695bb7f' data-gist-file='result.component.ts'></code><code data-gist-id='9ad202f8ec1e13b1fa9ba7a05695bb7f' data-gist-file='result.component.html'></code><strong><u>Error Component</u></strong><br/>In case of an error while typing the url, the page will route to an information page displaying the error and suggesting workarounds.<br/><code data-gist-id='9ad202f8ec1e13b1fa9ba7a05695bb7f' data-gist-file='error.component.html'></code></p>"
        },
        {
            "project_name": "Building a Blog App in Angular",
            "problem": "<strong>Description:</strong><p>Build an Angular app where users can read and add blog posts.</p><strong>Background of the problem statement:</strong><p>You are a web developer at a company that provides web solutions. The company was approached by a client to build a food blog app where users can read, write, edit, or delete new and existing posts. During sprint planning, you agree to lead this project and develop the frontend using Angular. The backend developers have agreed to provide you with the required APIs to perform CRUD operations on the data. The tasks you are responsible for include:</p><ul><li>Designing the app in Angular</li><li>Creating routes for navigation between Angular pages and components</li><li>Creating service for accessing REST API</li><li>Setting up a JSON server for testing until backend APIs are ready</li><li>Testing the application</li></ul><strong>You must use the following tools:</strong><ul><li>Angular: To build the application</li><li>NgModules: To configure the injector and the compiler and organize related components</li><li>JSON Server: To build a placeholder backend for app development and testing</li><li>Angular Router: To navigate within the app using URL links</li><li>Jasmine/Karma: To test the application</li></ul><strong>Following requirements should be met:</strong><ul><li>he app should be responsive.</li><li>The app should have functionalities for users to create, view, update, and delete posts.</li><li>The app should have a contact form, a header, and a nav component.</li></ul>",
            "message": "<p class='text-white'>Development in progress</p>",
            "screenshots": [],
            "code": "",
            "procedure": ""
        },
        {
            "project_name": "Building an Event Finder App in React",
            "problem": "<p><strong>Description</strong></p><p>Build a React app where users can view and promote upcoming events.</p><strong>Background of the problem statement:</strong><p>You are a web developer at a company called FindMyMovies. The company has decided to launch a new app called FindMyEvents where users can view and add upcoming events in their region. bBackend development has been outsourced and frontend will be developed in-house. During sprint planning, you agree to lead this project and develop an app that will let users find events using APIs that backend engineers will provide. The tasks you are responsible for:</p><ul><li>Building the application in React</li><li>Setting up a JSON server for testing until backend APIs are ready</li><li>Managing the state using Redux</li></ul><p><strong>You must use the following tools:</strong></p><ul><li>React: To build the application</li><li>Redux: To manage the state of components in the application</li><li>Redux Thunk: To manage the async flow</li><li>JSON Server: To build a placeholder backend for app development and testing</li><li>React Router: To navigate within the app using URL links</li><li>Bootstrap: To accelerate the development</li></ul><p><strong>Following requirements should be met:</strong></p><ul><li>The app should be responsive.</li><li>There should only be one source of truth for state management.</li><li>The app should have functionalities for users to create, view, and delete events.</li></ul>",
            "message": "<p class='text-white'>Hosting in progress</p>",
            "screenshots": [
                "https://raw.githubusercontent.com/zvdas/EventFinderApp/main/screenshots/screenshot_01.png",
                "https://raw.githubusercontent.com/zvdas/EventFinderApp/main/screenshots/screenshot_02.png",
                "https://raw.githubusercontent.com/zvdas/EventFinderApp/main/screenshots/screenshot_03.png",
                "https://raw.githubusercontent.com/zvdas/EventFinderApp/main/screenshots/screenshot_04.png",
                "https://raw.githubusercontent.com/zvdas/EventFinderApp/main/screenshots/screenshot_05.png",
                "https://raw.githubusercontent.com/zvdas/EventFinderApp/main/screenshots/screenshot_06.png",
                "https://raw.githubusercontent.com/zvdas/EventFinderApp/main/screenshots/screenshot_07.png",
                "https://raw.githubusercontent.com/zvdas/EventFinderApp/main/screenshots/screenshot_08.png",
                "https://raw.githubusercontent.com/zvdas/EventFinderApp/main/screenshots/screenshot_09.png",
                "https://raw.githubusercontent.com/zvdas/EventFinderApp/main/screenshots/screenshot_10.png",
                "https://raw.githubusercontent.com/zvdas/EventFinderApp/main/screenshots/screenshot_11.png",
                "https://raw.githubusercontent.com/zvdas/EventFinderApp/main/screenshots/screenshot_12.png",
                "https://raw.githubusercontent.com/zvdas/EventFinderApp/main/screenshots/screenshot_13.png",
                "https://raw.githubusercontent.com/zvdas/EventFinderApp/main/screenshots/screenshot_14.png",
                "https://raw.githubusercontent.com/zvdas/EventFinderApp/main/screenshots/screenshot_15.png",
                "https://raw.githubusercontent.com/zvdas/EventFinderApp/main/screenshots/screenshot_16.png",
                "https://raw.githubusercontent.com/zvdas/EventFinderApp/main/screenshots/screenshot_17.png",
                "https://raw.githubusercontent.com/zvdas/EventFinderApp/main/screenshots/screenshot_18.png",
                "https://raw.githubusercontent.com/zvdas/EventFinderApp/main/screenshots/screenshot_19.png",
                "https://raw.githubusercontent.com/zvdas/EventFinderApp/main/screenshots/screenshot_20.png",
                "https://raw.githubusercontent.com/zvdas/EventFinderApp/main/screenshots/screenshot_21.png",
                "https://raw.githubusercontent.com/zvdas/EventFinderApp/main/screenshots/screenshot_22.png",
                "https://raw.githubusercontent.com/zvdas/EventFinderApp/main/screenshots/screenshot_23.png",
                "https://raw.githubusercontent.com/zvdas/EventFinderApp/main/screenshots/screenshot_24.png",
                "https://raw.githubusercontent.com/zvdas/EventFinderApp/main/screenshots/screenshot_25.png",
                "https://raw.githubusercontent.com/zvdas/EventFinderApp/main/screenshots/screenshot_26.png",
                "https://raw.githubusercontent.com/zvdas/EventFinderApp/main/screenshots/screenshot_27.png"
            ],
            "code": "<head><script src='https://gist.github.com/zvdas/6c4b947bc55409e280f775761c306922.js'></script></head><body></body>",
            "procedure": "<p><strong>Step 1 : Install the necessary dependencies</strong><br/>Install the following libraries using npm<ul><li>react-router-dom : enable routing in React</li><li>react-redux : enable redux for state management in Redux</li><li>react-redux-thunk : enable redux with asynchronous ability (for CRUD using Redux)</li><li>axios : make API calls</li><li>bootstrap : enable RWD (responsive web design)</li></ul><code>npm i react-router-dom react-redux redux redux-thunk axios bootstrap</code><br/>Create the react app by entering the following in terminal<br/><code>npx create-react-app event-finder-app</code></p><p><strong>Step 2 : Project Folder Structure</strong><br/>In the src folder, create the folders, subfolders and subfolders in the following structure<br/><ul><li>event_module</li><ul><li>components</li><ol><li>add_event.js : form with logic to create an event</li><li>credits.js : attribute links for pictures used</li><li>navbar.js : navbar with routing links</li><li>page_default.js : link to navbar component</li><li>search_event.js : logic to find events by ID, date & venue, with options to update & delete</li><li>show_events.js : logic to display events with pagination options</li><li>update_event.js: form with logic to update an event</li></ol><li>database_files</li><ol><li>events.json : data for dummy API for CRUD</li></ol><li>redux</li><ol><li>actions</li><ol><li>event_actions.js : function definitions to implement CRUD methods</li><li>event_methods.js : methods with types & payloads</li><li>event_types.js : types of events</li></ol><li>reducers</li><ol><li>combine_reducer.js : combine all reducers</li><li>event_reducer.js : reducer function for different types of API calls</li></ol><li>store.js : configure redux store with reducer parameters & apply thunk middleware</li></ol><li>services</li><ol><li>event-services.js : API URLs & functions</li></ol></ul></p><p><strong>Step 3 : Launch React App</strong><br/>Launch the React app on default port (3000) by entering the following in terminal<br/><code>npm start</code>launch the link localhost:3000 in a new browser</p><p><strong>Step 4 : Launch JSON server</strong><br/>Setup json server to serve the database json file on port 4000, as 3000 is in use by React<br/><code>json-server --watch .\\src\\user_defined\\database_files\\events.json --port 4000</code><br/>import bootstrap css & bootstrap bundle in app.js to enable bootstrap<br/><code>import 'bootstrap/dist/css/bootstrap.min.css';</code><code>import 'bootstrap/dist/js/bootstrap.bundle.min';</code>Add photo as background image (additional but not necessary)</p><p><strong>Step 5 : Configure Redux Store & logic for State Management</strong><br/>Add the store as a provider for App.js which contains the logic for all the components to display in the browser. This will enable state management in all the components referenced in App.js and below (children).<br/><strong><u>Configure Event Actions</u></strong><br>Add the API URL of the fake API (json server) to the environment variables. Enter the API calls for different CRUD methods in event-services.js, which will connect the buttons in the application to the different CRUD methods like get (retrieve data), post (send data), put (update data) & delete (delete data). Enter the different event action types for the reducer function. Also add the mapToProps constant which will update the state of the component for each method call in each component. Add the event methods with data types and payloads for the reducer function. Whatever option is matched in the switch function of the reducer to the event types will return the respective payload. The event actions will map the data type and payload to the axios API methods mentioned in event_services.js and dispatch it to the store, where the state is updated and retrieved in the components accordingly<br/><strong><u>Configure Event Reducers</u></strong><br/>Create a reducer function which sets the initial state as an empty array (multiple values) and uses a switch function to match event types to event_actions.js & event_methods.js to return the state (if required) and the respective data payload. If there are multiple reducer functions for different tasks, like authorization/login then combine_reducer combines all the reducer functions into a single reducer function which can be used to create the store<br/><strong><u>Configure Redux Store</u></strong><br/>create the store with thunk middleware using the combine reducer</p><p><strong>Step 6 : Configure Components (view logic)</strong><br/>page_default.js contains the business logic to display the navbar.<br/><strong><u>Navbar</u></strong><br/>Logic to display the navbar with the selected component information<br/><strong><u>Create</u></strong><br/>Use forms to send the data to the API server with connect to connect to the redux store and bootstrap classes for RWD. The function createEvent along with other functions to be executed during runtime can be attached as onClick button events, which have to be bound to the functions to reflect changes without reverting.<br/><strong><u>Read</u></strong><br/>The data to be read or retrieved and displayed in browser is in the form of an array, hence using index and pagination with a list mapping will allow displaying the data in a neat and arranged manner (aesthetically pleasing).<br/><strong><u>Find/Search</u></strong><br/>Create the logic to search by ID, date & venue, depending on the option chosen by utilizing dropdown. The data retrieved will be an object in case of ID & array (single or multiple lines) in case of venue or date. If statement can be used to match the data to the presentation format. For each record displayed, there is an update and delete button.<br/><strong><u>Update</u></strong><br/>If the update button is clicked, then the logic redirects the user to the update page, where the data in the current record is shown in a fixed box, with blank fields for the data to be updated.<br/><strong><u>Delete</u></strong><br/>The delete logic is contained in search_event.js, when the delete button is clicked, the respective function is called in event_methods.js.<br/><strong><u>Credits</u></strong><br/>Details of references used for pictures referenced in website<br/></p>"
        },
        {
            "project_name": "Pokemon Search Application",
            "problem": "<p><strong>Description</strong></p><p>In the world of pokemon, where the user should be able to search for different pokemons, you have to create an application to search them with the following functionalities:</p><ul><li>The Pokemon application should have the list of pokemon details which will be provided in the form of JSON data i.e., it should have name, image, CP, attack, defense type etc.</li><li>It should have a search bar so that user can search the pokemon based on the name of pokemon.</li><li>Since we have many pokemon, apply pagination, so that user can only see 10 pokemon at a time.</li></ul><p><strong>Pagination</strong></p><img src='../../../assets/Screenshot from 2020-07-01 17-42-36.jpg'><p><strong>Search Bar</strong></p><img src='../../../assets/Screenshot from 2020-07-01 17-44-41.jpg'><p><strong>Note:</strong></p><ul><li>Pagination should have 'page current-page of Total pages'. For example: page 50 of 100</li><ul><li>The total pages should be calculated based on the JSON data provided.</li><li>And the current page is calculated based on the page, the user is in, currently.</li><li>Pagination should have id='pagination', which should contain the details as listed above.</li><li>The previous button should be disabled if it is in the first page and it should have id='previous'.</li><li>Next button, should show next set of pokemon (which is 10 pokemon on a click) and should have id='next'.</li></ul><li>Search bar should have an id='search'.</li><li>Pokemon's name should be inside the span tag (or any other tag) which should have id='name'.</li></ul>",
            "message": "<p class='text-white'>Development in progress</p>",
            "screenshots": [],
            "code": "",
            "procedure": ""
        }
    ]
}