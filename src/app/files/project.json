{
    "project":[
        {
            "project_name": "Online Test Application",
            "problem": "<p><strong>Description</strong></p><p>The Online Test Application system creates an application that enables users to provide online tests, review them, and display the results.</p><strong>System Details:</strong><p>This system contains three main modules: Quiz, Review, and Result. The quiz section of the online test application accepts the questions in JSON format. The JSON file can be easily shared from the server in the pre-defined format. The application renders the test at the client-side.<p>",
            "message": "<p class='text-white'>Click <a class='text-white' href='https://onlinetestapp-1e50c.web.app'><b>here</b></a> to go to the project.</p>",
            "screenshots":[
                "https://raw.githubusercontent.com/zvdas/OnlineTestApp/master/screenshots/screenshot_02.png",
                "https://raw.githubusercontent.com/zvdas/OnlineTestApp/master/screenshots/screenshot_05.png",
                "https://raw.githubusercontent.com/zvdas/OnlineTestApp/master/screenshots/screenshot_06.png",
                "https://raw.githubusercontent.com/zvdas/OnlineTestApp/master/screenshots/screenshot_08.png",
                "https://raw.githubusercontent.com/zvdas/OnlineTestApp/master/screenshots/screenshot_09.png",
                "https://raw.githubusercontent.com/zvdas/OnlineTestApp/master/screenshots/screenshot_10.png",
                "https://raw.githubusercontent.com/zvdas/OnlineTestApp/master/screenshots/screenshot_11.png",
                "https://raw.githubusercontent.com/zvdas/OnlineTestApp/master/screenshots/screenshot_13.png",
                "https://raw.githubusercontent.com/zvdas/OnlineTestApp/master/screenshots/screenshot_14.png",
                "https://raw.githubusercontent.com/zvdas/OnlineTestApp/master/screenshots/screenshot_15.png",
                "https://raw.githubusercontent.com/zvdas/OnlineTestApp/master/screenshots/screenshot_16.png",
                "https://raw.githubusercontent.com/zvdas/OnlineTestApp/master/screenshots/screenshot_19.png",
                "https://raw.githubusercontent.com/zvdas/OnlineTestApp/master/screenshots/screenshot_20.png",
                "https://raw.githubusercontent.com/zvdas/OnlineTestApp/master/screenshots/screenshot_21.png",
                "https://raw.githubusercontent.com/zvdas/OnlineTestApp/master/screenshots/screenshot_22.png",
                "https://raw.githubusercontent.com/zvdas/OnlineTestApp/master/screenshots/screenshot_23.png"

            ],
            "code": "<head><script src='https://gist.github.com/zvdas/9ad202f8ec1e13b1fa9ba7a05695bb7f.js'></script></head><body></body>",
            "code1": "<head><script>type='text/javascript' src='https://cdn.jsdelivr.net/npm/gist-embed@1.0.4/dist/gist-embed.min.js'</script></head><body><code data-gist-id='9ad202f8ec1e13b1fa9ba7a05695bb7f'></code><body>",
            "procedure": "<p><strong>Step 1 : Create an angular application</strong><br/>To create a new angular project in a specific folder, open terminal inside that folder and type<br/><code>ng new OnlineTestApp<br/>Would you like to add Angular routing? (y/N) y<br/>Which stylesheet format would you like to use? (Use arrow keys)<br/>> CSS</code><br/>to execute an angular project<br/><code>ng serve</code><br/>An angular app page will be created on localhost:4200. Paste the link in the browser to view.</p><p><strong>Step 2 : Create the quiz file to host on JSON server (fake API)</strong><br/>Create a json server with 10 questions. (A json linter can be used or a csv file to json online converter).  Install a json server to host the databases for participants, the quiz questions and answers and participant answers. Create a pipe for indexing the quiz to display individual results per page. In the quiz ts file, while posting the participant answers to the database, a formula will be used to check whether the answers are correct or incorrect for each question.</p><p><strong>Step 3 : Install required dependencies for the project</strong><br/>Generate the project dependencies (components, services, pipes) using angular CLI.<br/><code>ng g component register<br/>ng g c navbar<br/>ng g c quiz<br/>ng g c result<br/>ng g c error<br/>ng g service services/databases<br/>ng g pipes pipes/StringToNumber</code><br/>Install the JSON server using npm and host the files on different ports.<br/>Note: all files can be hosted on the same port as sub links eg: http://localhost:3000/participant, http://localhost:3000/quiz, http://localhost:3000/answer. However for easy visibility and less congestion during demonstration, separate ports have been used for each file.<br/><code data-gist-id='9ad202f8ec1e13b1fa9ba7a05695bb7f' data-gist-file='quiz.json'></code><code>npm install --save json-server<br/>json-server --watch --port 3000 database-files/participant.json<br/>json-server --watch --port 4000 database-files/quiz.json<br/>json-server --watch --port 5000 database-files/answer.json</code><br/>Install angular material for custom icons from material.angular.io.<br/><code>ng add @angular/material</code><br/>Install bootstrap for Responsive Web Design (RWD)<br/><code>npm install --save bootstrap</code><br/>Install countdown timer (not mandatory to project requirements)<br/><code>npm install ngx-countdown --save</code></p><p><strong>Step 4: Routing</strong><br/>Add routes to the app routing module so that links clicked can redirect to required pages as well as blank and wildcard for empty pages. Export the app routing module to app module so that the routes function properly. Also add router outlet tag to the app html component so that all the children components can be added to the same page.<code data-gist-id='9ad202f8ec1e13b1fa9ba7a05695bb7f' data-gist-file='app-routing.module.ts'></code><code data-gist-id='9ad202f8ec1e13b1fa9ba7a05695bb7f' data-gist-file='app.module.ts'></code><code data-gist-id='9ad202f8ec1e13b1fa9ba7a05695bb7f' data-gist-file='app.component.html'></code></p><p><strong>Step 6 : MVC (Model-View-Controller) pattern - Model</strong><br/>Create a ts (TypeScript) file for each of the json files to be used as databases, so that the classes to be exported can be mapped to the object (i.e.) define name, email, username and password for the participant.<br/><code data-gist-id='9ad202f8ec1e13b1fa9ba7a05695bb7f' data-gist-file='participant.ts'></code><code data-gist-id='9ad202f8ec1e13b1fa9ba7a05695bb7f' data-gist-file='answer.ts'></code><code data-gist-id='9ad202f8ec1e13b1fa9ba7a05695bb7f' data-gist-file='quiz.ts'></code></p><p><strong>Step 7 : Create Service for posting to and reading from database (fake JSON server APIs)</strong><br/>Define functions to send and retrieve fields to and from the databases using HTTP Client.<br/><code data-gist-id='9ad202f8ec1e13b1fa9ba7a05695bb7f' data-gist-file='database.service.ts'></code></p><p><strong>Step 8 : MVC pattern - Controllers (.ts files) and Views (.html files)</strong><br/><strong><u>Register Component</u></strong><br/>Create the register component using reactive and angular forms to enable one way communication from model to view so that data fed into the registration form can be sent to the database and create a function to route the webpage to quiz once the “Start quiz” button is clicked.<br/><code data-gist-id='9ad202f8ec1e13b1fa9ba7a05695bb7f' data-gist-file='register.component.ts'></code><code data-gist-id='9ad202f8ec1e13b1fa9ba7a05695bb7f' data-gist-file='register.component.html'></code><strong><u>Navbar Component</u></strong><br/>Create a navbar component which will display the name of the person taking the quiz (fed from registration page), the date and time.<code data-gist-id='9ad202f8ec1e13b1fa9ba7a05695bb7f' data-gist-file='navbar.component.ts'></code><code data-gist-id='9ad202f8ec1e13b1fa9ba7a05695bb7f' data-gist-file='navbar.component.html'></code><br/><strong><u>Quiz Component</u></strong><br/>Create functions in the quiz component to get the quiz data from the database and display in the webpage, one question at a time using for loop with indexing. Create an index staring with 0 with end 9 (10 questions) and use increments with (click) to increment the questions one at a time. While sending the answers clicked by the participant, a formula will check whether the participant answer matches the answer in the quiz database to determine whether it is correct or incorrect. The result will be sent to the database along with the answer selected.<br/><code data-gist-id='9ad202f8ec1e13b1fa9ba7a05695bb7f' data-gist-file='quiz.component.ts'></code><code data-gist-id='9ad202f8ec1e13b1fa9ba7a05695bb7f' data-gist-file='quiz.component.html'></code><strong><u>Result Component</u></strong><br/>The result will be displayed on the screen with a review section below so that each question can be reviewed one at a time, scrolled using the same concept of for loop with indexing mentioned earlier. There will also be an option to retake the quiz.<br/><code data-gist-id='9ad202f8ec1e13b1fa9ba7a05695bb7f' data-gist-file='result.component.ts'></code><code data-gist-id='9ad202f8ec1e13b1fa9ba7a05695bb7f' data-gist-file='result.component.html'></code><strong><u>Error Component</u></strong><br/>In case of an error while typing the url, the page will route to an information page displaying the error and suggesting workarounds.<br/><code data-gist-id='9ad202f8ec1e13b1fa9ba7a05695bb7f' data-gist-file='error.component.html'></code></p>"
        },
        {
            "project_name": "Building a Blog App in Angular",
            "problem": "<strong>Description:</strong><p>Build an Angular app where users can read and add blog posts.</p><strong>Background of the problem statement:</strong><p>You are a web developer at a company that provides web solutions. The company was approached by a client to build a food blog app where users can read, write, edit, or delete new and existing posts. During sprint planning, you agree to lead this project and develop the frontend using Angular. The backend developers have agreed to provide you with the required APIs to perform CRUD operations on the data. The tasks you are responsible for include:</p><ul><li>Designing the app in Angular</li><li>Creating routes for navigation between Angular pages and components</li><li>Creating service for accessing REST API</li><li>Setting up a JSON server for testing until backend APIs are ready</li><li>Testing the application</li></ul><strong>You must use the following tools:</strong><ul><li>Angular: To build the application</li><li>NgModules: To configure the injector and the compiler and organize related components</li><li>JSON Server: To build a placeholder backend for app development and testing</li><li>Angular Router: To navigate within the app using URL links</li></ul><strong>Following requirements should be met:</strong><ul><li>The app should be responsive.</li><li>The app should have functionalities for users to create, view, update, and delete posts.</li><li>The app should have a contact form, a header, and a nav component.</li></ul>",
            "message": "<p class='text-white'>Click <a class='text-white' href='https://foodblogapp-d6a7f.web.app'><b>here</b></a> to go to the project.</p>",
            "screenshots": [
                "https://raw.githubusercontent.com/zvdas/FoodBlogApp/main/screenshots/screenshot_001.png",
                "https://raw.githubusercontent.com/zvdas/FoodBlogApp/main/screenshots/screenshot_002.png",
                "https://raw.githubusercontent.com/zvdas/FoodBlogApp/main/screenshots/screenshot_003.png",
                "https://raw.githubusercontent.com/zvdas/FoodBlogApp/main/screenshots/screenshot_004.png",
                "https://raw.githubusercontent.com/zvdas/FoodBlogApp/main/screenshots/screenshot_005.png",
                "https://raw.githubusercontent.com/zvdas/FoodBlogApp/main/screenshots/screenshot_006.png",
                "https://raw.githubusercontent.com/zvdas/FoodBlogApp/main/screenshots/screenshot_007.png",
                "https://raw.githubusercontent.com/zvdas/FoodBlogApp/main/screenshots/screenshot_008.png",
                "https://raw.githubusercontent.com/zvdas/FoodBlogApp/main/screenshots/screenshot_009.png",
                "https://raw.githubusercontent.com/zvdas/FoodBlogApp/main/screenshots/screenshot_010.png",
                "https://raw.githubusercontent.com/zvdas/FoodBlogApp/main/screenshots/screenshot_011.png",
                "https://raw.githubusercontent.com/zvdas/FoodBlogApp/main/screenshots/screenshot_012.png",
                "https://raw.githubusercontent.com/zvdas/FoodBlogApp/main/screenshots/screenshot_013.png",
                "https://raw.githubusercontent.com/zvdas/FoodBlogApp/main/screenshots/screenshot_014.png",
                "https://raw.githubusercontent.com/zvdas/FoodBlogApp/main/screenshots/screenshot_015.png",
                "https://raw.githubusercontent.com/zvdas/FoodBlogApp/main/screenshots/screenshot_016.png",
                "https://raw.githubusercontent.com/zvdas/FoodBlogApp/main/screenshots/screenshot_017.png",
                "https://raw.githubusercontent.com/zvdas/FoodBlogApp/main/screenshots/screenshot_018.png",
                "https://raw.githubusercontent.com/zvdas/FoodBlogApp/main/screenshots/screenshot_019.png",
                "https://raw.githubusercontent.com/zvdas/FoodBlogApp/main/screenshots/screenshot_020.png"
            ],
            "code": "<head><script src='https://gist.github.com/zvdas/1a38c4bc921296907f50d6b3c980faa7.js'></script></head><body></body>",
            "procedure": "<ol> <li>Create a new app by running the following command in terminal<br/> <code>ng new fba_v1</code></li> <li>Once created, go into the app folder by running the following command in terminal<br/> <code>cd fba_v1</code></li> <li>Install bootstrap & json-server by running the following command in terminal<br/> <code>npm i --save bootstrap json-server</code></li> <li>Generate the module blog by running the following command in terminal<br/> <code>ng g m blog -m=app</code></li> <li>Generate the classes blog & contact inside the blog module by running the following command in terminal<br/> <code>ng g cl blog/classes/blog/blog --type=model<br/> ng g cl blog/classes/contact/contact --type=model</code></li> <li>Generate the services blog & contact inside the blog module by running the following command in terminal<br/> <code>ng g s blog/services/blog/blog<br/> ng g s blog/services/contact/contact</code></li> <li>Generate the components home, blog, contact, show, error & navbar inside the blog module by running the following command in terminal<br/> <code>ng g c blog/components/home<br/> ng g c blog/components/blog<br/> ng g c blog/components/contact<br/> ng g c blog/components/show<br/> ng g c blog/components/error<br/> code>ng g c blog/components/navbar</code></li> <li>Create a folder files inside the blog module and a json file api-placeholder with an empty json error</li> <li>Import bootstrap in the styles.css file and give the body background a velvet colour</li> <li>Import bootstrap in the main.ts file</li> <li>Add the routes in the app-routing.module.ts file and add property { useHash: true } in RouterModule to avoid 404 issues while hosting the application.</li> <li>Add the objects (id, date, title, author, message & category) to the blog.model.ts file</li> <li>Add the objects (Name, Email, Password, Phone, Address_Line_1, Address_Line_2, City, State, Country & Zip) to the contact.model.ts file</li> <li>Import the HTTPClientModule in blog.module.ts to enable HTTPClient which can make API calls like get, post, put & delete</li> <li>Declare the url for API CRUD operation, provide the methods for API CRUD & Inject the HTTPClient into the constructor to perform the calls in the blog.service.ts file</li> <li>Declare the url for API CRUD operation, provide the methods for API CRUD & Inject the HTTPClient into the constructor to perform the calls in the contact.service.ts file</li> <li>Import the FormsModule (template driven) & ReactiveFormsModule (model driven) in blog.module.ts to be used by components implementing forms</li> <li>Create functions in navbar.component.ts, which will be available to navbar.component.html to implement using functions. Inject Router from RouterModule to navigate to contact & blog</li> <li>Create the HTML elements to be displayed in the browser by entering the following in navbar.component.html file</li> <li>Create the HTML elements to be displayed in the browser (by entering the following in home.component.html file). Ensure that the app-navbar tag is entered so that the navbar is displayed in the browser along with home component elements.</li> <li>Invoke the methods from the BlogService in the blog-page.component.ts, which will be available to blog.component.html to implement using functions.</li> <li>Create the HTML elements to be displayed in the browser (by entering the following in blog.component.html file) and invoke the functions created in blog.component.ts. Ensure that the app-navbar tag is entered so that the navbar is displayed in the browser along with blog component elements.</li> <li>Invoke the methods from the ContactService in the contact.component.ts, which will be available to contact.component.html to implement using functions.</li> <li>Create the properties of the tags in contact.component.css file, which will be implemented in contact.component.html file</li> <li>Create the HTML elements to be displayed in the browser (by entering the following in contact.component.html file) and invoke the functions created in contact.component.ts. Ensure that the app-navbar tag is entered so that the navbar is displayed in the browser along with contact component elements.</li> <li>Invoke the methods from the ContactService in the show.component.ts, which will be available to show.component.html to implement using functions.</li> <li>Create the HTML elements to be displayed in the browser (by entering the following in show.component.html file) and invoke the functions created in show.component.ts. Ensure that the app-navbar tag is entered so that the navbar is displayed in the browser along with show component elements.</li> <li>Invoke the methods from the router in the error.component.ts, which will be available to error.component.html to implement using functions.</li> <li>Create the HTML elements to be displayed in the browser (by entering the following in error.component.html file) and invoke the functions created in error.component.ts. Ensure that the app-navbar tag is entered so that the navbar is displayed in the browser along with error component elements.</li> <li>Create the properties of the tags in app.component.css file, which will be implemented in app.component.html file</li> <li>Export the NavbarComponent in blog.module.ts so that it is available in app.component.html</li> <li>Ensure that router-outlet tag is mentioned in app.component.html file, which will enable display of the components in routes array of app-routing.module.ts in the browser.</li> <li>View the app in browser by running the following command in terminal<br/> <code>ng serve --open</code></li> <li>Host the json file on json-server (by running the following command in terminal) to serve APIs for the application to consume. This can be later replaced by web APIs or APIs created in NodeJS with Express & a database (like MongoDB)<br/> <code>json-server --watch ./src/app/blog/files/api-placeholder.json</code></li></ol>"
        },
        {
            "project_name": "Building an Event Finder App in React",
            "problem": "<p><strong>Description</strong></p><p>Build a React app where users can view and promote upcoming events.</p><strong>Background of the problem statement:</strong><p>You are a web developer at a company called FindMyMovies. The company has decided to launch a new app called FindMyEvents where users can view and add upcoming events in their region. bBackend development has been outsourced and frontend will be developed in-house. During sprint planning, you agree to lead this project and develop an app that will let users find events using APIs that backend engineers will provide. The tasks you are responsible for:</p><ul><li>Building the application in React</li><li>Setting up a JSON server for testing until backend APIs are ready</li><li>Managing the state using Redux</li></ul><p><strong>You must use the following tools:</strong></p><ul><li>React: To build the application</li><li>Redux: To manage the state of components in the application</li><li>Redux Thunk: To manage the async flow</li><li>JSON Server: To build a placeholder backend for app development and testing</li><li>React Router: To navigate within the app using URL links</li><li>Bootstrap: To accelerate the development</li></ul><p><strong>Following requirements should be met:</strong></p><ul><li>The app should be responsive.</li><li>There should only be one source of truth for state management.</li><li>The app should have functionalities for users to create, view, and delete events.</li></ul>",
            "message": "<p class='text-white'>Click <a class='text-white' href='https://eventfinderapp-2d94f.web.app'><b>here</b></a> to go to the project.</p>",
            "screenshots": [
                "https://raw.githubusercontent.com/zvdas/EventFinderApp/main/screenshots/screenshot_01.png",
                "https://raw.githubusercontent.com/zvdas/EventFinderApp/main/screenshots/screenshot_02.png",
                "https://raw.githubusercontent.com/zvdas/EventFinderApp/main/screenshots/screenshot_03.png",
                "https://raw.githubusercontent.com/zvdas/EventFinderApp/main/screenshots/screenshot_04.png",
                "https://raw.githubusercontent.com/zvdas/EventFinderApp/main/screenshots/screenshot_05.png",
                "https://raw.githubusercontent.com/zvdas/EventFinderApp/main/screenshots/screenshot_06.png",
                "https://raw.githubusercontent.com/zvdas/EventFinderApp/main/screenshots/screenshot_07.png",
                "https://raw.githubusercontent.com/zvdas/EventFinderApp/main/screenshots/screenshot_08.png",
                "https://raw.githubusercontent.com/zvdas/EventFinderApp/main/screenshots/screenshot_09.png",
                "https://raw.githubusercontent.com/zvdas/EventFinderApp/main/screenshots/screenshot_10.png",
                "https://raw.githubusercontent.com/zvdas/EventFinderApp/main/screenshots/screenshot_11.png",
                "https://raw.githubusercontent.com/zvdas/EventFinderApp/main/screenshots/screenshot_12.png",
                "https://raw.githubusercontent.com/zvdas/EventFinderApp/main/screenshots/screenshot_13.png",
                "https://raw.githubusercontent.com/zvdas/EventFinderApp/main/screenshots/screenshot_14.png",
                "https://raw.githubusercontent.com/zvdas/EventFinderApp/main/screenshots/screenshot_15.png",
                "https://raw.githubusercontent.com/zvdas/EventFinderApp/main/screenshots/screenshot_16.png",
                "https://raw.githubusercontent.com/zvdas/EventFinderApp/main/screenshots/screenshot_17.png",
                "https://raw.githubusercontent.com/zvdas/EventFinderApp/main/screenshots/screenshot_18.png",
                "https://raw.githubusercontent.com/zvdas/EventFinderApp/main/screenshots/screenshot_19.png",
                "https://raw.githubusercontent.com/zvdas/EventFinderApp/main/screenshots/screenshot_20.png",
                "https://raw.githubusercontent.com/zvdas/EventFinderApp/main/screenshots/screenshot_21.png",
                "https://raw.githubusercontent.com/zvdas/EventFinderApp/main/screenshots/screenshot_22.png",
                "https://raw.githubusercontent.com/zvdas/EventFinderApp/main/screenshots/screenshot_23.png",
                "https://raw.githubusercontent.com/zvdas/EventFinderApp/main/screenshots/screenshot_24.png",
                "https://raw.githubusercontent.com/zvdas/EventFinderApp/main/screenshots/screenshot_25.png",
                "https://raw.githubusercontent.com/zvdas/EventFinderApp/main/screenshots/screenshot_26.png",
                "https://raw.githubusercontent.com/zvdas/EventFinderApp/main/screenshots/screenshot_27.png"
            ],
            "code": "<head><script src='https://gist.github.com/zvdas/6c4b947bc55409e280f775761c306922.js'></script></head><body></body>",
            "procedure": "<p><strong>Step 1 : Install the necessary dependencies</strong><br/>Install the following libraries using npm<ul><li>react-router-dom : enable routing in React</li><li>react-redux : enable redux for state management in Redux</li><li>react-redux-thunk : enable redux with asynchronous ability (for CRUD using Redux)</li><li>axios : make API calls</li><li>bootstrap : enable RWD (responsive web design)</li></ul><code>npm i react-router-dom react-redux redux redux-thunk axios bootstrap</code><br/>Create the react app by entering the following in terminal<br/><code>npx create-react-app event-finder-app</code></p><p><strong>Step 2 : Project Folder Structure</strong><br/>In the src folder, create the folders, subfolders and subfolders in the following structure<br/><ul><li>event_module</li><ul><li>components</li><ol><li>add_event.js : form with logic to create an event</li><li>credits.js : attribute links for pictures used</li><li>navbar.js : navbar with routing links</li><li>page_default.js : link to navbar component</li><li>search_event.js : logic to find events by ID, date & venue, with options to update & delete</li><li>show_events.js : logic to display events with pagination options</li><li>update_event.js: form with logic to update an event</li></ol><li>database_files</li><ol><li>events.json : data for dummy API for CRUD</li></ol><li>redux</li><ol><li>actions</li><ol><li>event_actions.js : function definitions to implement CRUD methods</li><li>event_methods.js : methods with types & payloads</li><li>event_types.js : types of events</li></ol><li>reducers</li><ol><li>combine_reducer.js : combine all reducers</li><li>event_reducer.js : reducer function for different types of API calls</li></ol><li>store.js : configure redux store with reducer parameters & apply thunk middleware</li></ol><li>services</li><ol><li>event-services.js : API URLs & functions</li></ol></ul></p><p><strong>Step 3 : Launch React App</strong><br/>Launch the React app on default port (3000) by entering the following in terminal<br/><code>npm start</code>launch the link localhost:3000 in a new browser</p><p><strong>Step 4 : Launch JSON server</strong><br/>Setup json server to serve the database json file on port 4000, as 3000 is in use by React<br/><code>json-server --watch .\\src\\user_defined\\database_files\\events.json --port 4000</code><br/>import bootstrap css & bootstrap bundle in app.js to enable bootstrap<br/><code>import 'bootstrap/dist/css/bootstrap.min.css';</code><code>import 'bootstrap/dist/js/bootstrap.bundle.min';</code>Add photo as background image (additional but not necessary)</p><p><strong>Step 5 : Configure Redux Store & logic for State Management</strong><br/>Add the store as a provider for App.js which contains the logic for all the components to display in the browser. This will enable state management in all the components referenced in App.js and below (children).<br/><strong><u>Configure Event Actions</u></strong><br>Add the API URL of the fake API (json server) to the environment variables. Enter the API calls for different CRUD methods in event-services.js, which will connect the buttons in the application to the different CRUD methods like get (retrieve data), post (send data), put (update data) & delete (delete data). Enter the different event action types for the reducer function. Also add the mapToProps constant which will update the state of the component for each method call in each component. Add the event methods with data types and payloads for the reducer function. Whatever option is matched in the switch function of the reducer to the event types will return the respective payload. The event actions will map the data type and payload to the axios API methods mentioned in event_services.js and dispatch it to the store, where the state is updated and retrieved in the components accordingly<br/><strong><u>Configure Event Reducers</u></strong><br/>Create a reducer function which sets the initial state as an empty array (multiple values) and uses a switch function to match event types to event_actions.js & event_methods.js to return the state (if required) and the respective data payload. If there are multiple reducer functions for different tasks, like authorization/login then combine_reducer combines all the reducer functions into a single reducer function which can be used to create the store<br/><strong><u>Configure Redux Store</u></strong><br/>create the store with thunk middleware using the combine reducer</p><p><strong>Step 6 : Configure Components (view logic)</strong><br/>page_default.js contains the business logic to display the navbar.<br/><strong><u>Navbar</u></strong><br/>Logic to display the navbar with the selected component information<br/><strong><u>Create</u></strong><br/>Use forms to send the data to the API server with connect to connect to the redux store and bootstrap classes for RWD. The function createEvent along with other functions to be executed during runtime can be attached as onClick button events, which have to be bound to the functions to reflect changes without reverting.<br/><strong><u>Read</u></strong><br/>The data to be read or retrieved and displayed in browser is in the form of an array, hence using index and pagination with a list mapping will allow displaying the data in a neat and arranged manner (aesthetically pleasing).<br/><strong><u>Find/Search</u></strong><br/>Create the logic to search by ID, date & venue, depending on the option chosen by utilizing dropdown. The data retrieved will be an object in case of ID & array (single or multiple lines) in case of venue or date. If statement can be used to match the data to the presentation format. For each record displayed, there is an update and delete button.<br/><strong><u>Update</u></strong><br/>If the update button is clicked, then the logic redirects the user to the update page, where the data in the current record is shown in a fixed box, with blank fields for the data to be updated.<br/><strong><u>Delete</u></strong><br/>The delete logic is contained in search_event.js, when the delete button is clicked, the respective function is called in event_methods.js.<br/><strong><u>Credits</u></strong><br/>Details of references used for pictures referenced in website<br/></p>"
        },
        {
            "project_name": "Pokemon Search Application",
            "problem": "<p><strong>Description</strong></p><p>In the world of pokemon, where the user should be able to search for different pokemons, you have to create an application to search them with the following functionalities:</p><ul><li>The Pokemon application should have the list of pokemon details which will be provided in the form of JSON data i.e., it should have name, image, CP, attack, defense type etc.</li><li>It should have a search bar so that user can search the pokemon based on the name of pokemon.</li><li>Since we have many pokemon, apply pagination, so that user can only see 10 pokemon at a time.</li></ul><p><strong>Pagination</strong></p><img src='../../../assets/Screenshot from 2020-07-01 17-42-36.jpg'><p><strong>Search Bar</strong></p><img src='../../../assets/Screenshot from 2020-07-01 17-44-41.jpg'><p><strong>Note:</strong></p><ul><li>Pagination should have 'page current-page of Total pages'. For example: page 50 of 100</li><ul><li>The total pages should be calculated based on the JSON data provided.</li><li>And the current page is calculated based on the page, the user is in, currently.</li><li>Pagination should have id='pagination', which should contain the details as listed above.</li><li>The previous button should be disabled if it is in the first page and it should have id='previous'.</li><li>Next button, should show next set of pokemon (which is 10 pokemon on a click) and should have id='next'.</li></ul><li>Search bar should have an id='search'.</li><li>Pokemon's name should be inside the span tag (or any other tag) which should have id='name'.</li></ul>",
            "message": "<p class='text-white'>Click <a class='text-white' href='https://pokemonsearchapp-a72a7.web.app'><b>here</b></a> to go to the project.</p>",
            "screenshots": [
                "https://raw.githubusercontent.com/zvdas/PokemonSearchApp/main/screenshots/screenshot_001.png",
                "https://raw.githubusercontent.com/zvdas/PokemonSearchApp/main/screenshots/screenshot_002.png",
                "https://raw.githubusercontent.com/zvdas/PokemonSearchApp/main/screenshots/screenshot_003.png",
                "https://raw.githubusercontent.com/zvdas/PokemonSearchApp/main/screenshots/screenshot_004.png",
                "https://raw.githubusercontent.com/zvdas/PokemonSearchApp/main/screenshots/screenshot_005.png",
                "https://raw.githubusercontent.com/zvdas/PokemonSearchApp/main/screenshots/screenshot_006.png",
                "https://raw.githubusercontent.com/zvdas/PokemonSearchApp/main/screenshots/screenshot_007.png",
                "https://raw.githubusercontent.com/zvdas/PokemonSearchApp/main/screenshots/screenshot_008.png",
                "https://raw.githubusercontent.com/zvdas/PokemonSearchApp/main/screenshots/screenshot_009.png",
                "https://raw.githubusercontent.com/zvdas/PokemonSearchApp/main/screenshots/screenshot_010.png",
                "https://raw.githubusercontent.com/zvdas/PokemonSearchApp/main/screenshots/screenshot_011.png",
                "https://raw.githubusercontent.com/zvdas/PokemonSearchApp/main/screenshots/screenshot_012.png",
                "https://raw.githubusercontent.com/zvdas/PokemonSearchApp/main/screenshots/screenshot_013.png",
                "https://raw.githubusercontent.com/zvdas/PokemonSearchApp/main/screenshots/screenshot_014.png",
                "https://raw.githubusercontent.com/zvdas/PokemonSearchApp/main/screenshots/screenshot_015.png",
                "https://raw.githubusercontent.com/zvdas/PokemonSearchApp/main/screenshots/screenshot_016.png"
            ],
            "code": "<head><script src='https://gist.github.com/zvdas/8ee51fdb42ec72433d5029db64c5d3a2.js'></script></head><body></body>",
            "procedure": "<ol> <li>Create a new react app by running the following in terminal<br/> <code>npx create-react-app psa_v1</code></li> <li>Once created, enter the react app main folder using the following command<br/> <code>cd psa_v1</code></li> <li>Run the React Application by running the following command<br/> <code>npm start</code></li> <li>Install the necessary modules like bootstrap (for Responsive Web Design), json-server (to serve JSON files as an API placeholder), dotenv (.env config)<br/> <code>npm i --save bootstrap json-server dotenv</code></li> <li>Import import bootstrap css & bootstrap bundle in app.js to enable bootstrap</li> <li>Launch JSON server to serve as a placeholder for APIs. Setup json server to serve the database json file on port 4000, as 3000 is in use by React.<br/> <code>json-server --watch ./src/user_defined/files/pokemon.json --port 4000</code></li> <li>Create an .env file and add it to .gitignore in order to protect sensitive information, such as MongoDB URI, which contains username & passwords. Add the API URL of the fake API (json server) to the environment variables.</li> <strong>Setup Services</strong><br/> <li>Configure the Pokemon Services, which contain API methods from axios (get, post, put & delete) to different actions to perform on the API url. For development purposes, a placeholder API with URL localhost:4000/pokemons will be used. The URL is stored in .env file which will be referenced in this file.</li> <strong>Setup Redux</strong><br/> <li>Setup Redux store for state management. Install the redux libraries by running the following in terminal<br/> <code>npm i --save react-router-dom react-redux redux redux-thunk axios</code><br/> <ul><li>react-router-dom : enable routing in React</li> <li>react-redux : enable redux for state management in Redux</li> <li>react-redux-thunk : enable redux with asynchronous ability (for CRUD using Redux)</li> <li>axios : make API calls</li></ul> <li>Configure Pokemon Actions by entering the different pokemon action types for the reducer function. Also add the mapToProps constant which will update the state of the component for each method call in each component.</li> <li>Add the pokemon methods with data types and payloads for the reducer function. Whatever option is matched in the switch function of the reducer to the pokemon types will return the respective payload.</li> <li>The pokemon actions will map the data type and payload to the axios API methods mentioned in pokemon_services.js and dispatch it to the store, where the state is updated and retrieved in the components accordingly.</li> <li>Configure Pokemon Reducers & create a reducer function which sets the initial state as an empty array (multiple values) and uses a switch function to match pokemon types to the actions & the methods to return the state (if required) and the respective data payload.</li> <li>If there are multiple reducer functions for different tasks, like authorization/login then combine_reducer combines all the reducer functions into a single reducer function which can be used to create the store.</li> <li>Configure Redux Store & logic for State Management. Create the store with thunk middleware using the combine reducer. Add the store as a provider for App.js which contains the logic for all the components to display in the browser. This will enable state management in all the components referenced in App.js and below.</li> <strong>Setup Components (view logic)</strong><br/> <li>Home Component will contain the logic and display code for the home component, which will be displayed as soon as the website is loaded.</li> <li>Navbar Component will contain the routing logic with links to the components (implementing BrowserRouter module) and display code to view the navbar.</li> <li>Master Component will contain the logic to add, list, update & delete the pokemon data.</li> <li>Display Component will only display the pokemon data with search bar and pagination.</li> <li>Credits Component is to attribute the content sources.</li> </ol> <br/> <i><strong>The Flow</strong></i><br/> <ul> <li>The initial state is an empty array, so no data is present.</li> <li>The user enters the data by filling the form in the master component.</li> <li>When the submit button is clicked</li> <ul><li>the function sends the data to pokemon-actions.js</li> <li>which invokes the method to send the data to pokemon-service.js, which posts the data to the API.</li> <li>once posted, the data is dispatched to pokemon-method.js</li> <li>where the type is mapped to pokemon-types & payload is mapped to the data and sent to pokemon-reducer.js</li> <li>where the switch function separates the pokemon types and returns the updated state along with the payload and sends it to the store.</li> <li>If multiple reducers are used, then combine-reducer combines the payloads and stores it in the store.</li></ul> <li>The data from the API is fetched from the store using mapToProps, which updates the state & payload to the master & display components.</li> <li>In the master, when the user performs an edit/update or delete action by clicking the respective buttons, the state is updated in the same manner.</li> </ul>"
        },
        {
            "project_name": "3D Model Application",
            "problem": "<p><strong>Description</strong></p><p>Create an application using Angular framework to upload, list and render 3D models using Three.js library</p>",
            "message": "<p class='text-white'>Click <a class='text-white' href='https://threedmodelapp.web.app'><b>here</b></a> to go to the project.</p>",
            "screenshots":[
                "https://raw.githubusercontent.com/zvdas/3dmodelapp/main/screenshots/Screenshot%2001.png",
                "https://raw.githubusercontent.com/zvdas/3dmodelapp/main/screenshots/Screenshot%2002.png",
                "https://raw.githubusercontent.com/zvdas/3dmodelapp/main/screenshots/Screenshot%2003.png",
                "https://raw.githubusercontent.com/zvdas/3dmodelapp/main/screenshots/Screenshot%2004.png",
                "https://raw.githubusercontent.com/zvdas/3dmodelapp/main/screenshots/Screenshot%2005.png",
                "https://raw.githubusercontent.com/zvdas/3dmodelapp/main/screenshots/Screenshot%2006.png"
            ],
            "code":"<head><script src='https://gist.github.com/zvdas/2e51eb0cad98e6dd15d9446d18c9e457.js'></script></head><body></body>",
            "procedure":"<p><strong>Objective : Upload model file to dummy API (JSON) server, retrieve filenames to list & render selected file (model).</strong></p><p><strong>Steps:</strong></p><p><ol><li>Create a new angular app using following command<br/><code>ng new modelapp</code></li><li>Install boostrap for Responsive Wed Design (RWD) by using the following command<br/><code>npm i bootstrap</code></li><li>Add the following import to the styles.css file<br/><code>@import '~bootstrap/dist/css/bootstrap.min.css';</code></li><li>Add the following import to the main.ts file<br/><code>import 'bootstrap/dist/js/bootstrap.bundle.min.js';</code></li><li>Generate new module in app folder using following command<br/><code>ng g m model -m=app</code></li><li>Generate new components in model module using the following command<br/><code>ng g c model/modelList<br/>ng  c model/modelUpload<br/>ng g c model/modelUpload<br/>ng g c model/modelRender</code></li><li>Generate new service in app folder for model upload & retrieve<br/><code>ng g s services/modelcr</code></li><li>Open src/app folder and add router outlet tag to the app.component.html file</li><li>Start the app on local server on default port 4200 and open in browser by using the following command<br/><code>ng serve --open</code></li><li>Start a json server on localhost which will store the model using the following command<br/><code>json-server --watch .\\src\\app\\files\\model.json</code></li><li> Start editing the model.json file to match the class<li> Generate a class using the following command<br/><code>ng g cl classes/model</code></li><li> Add the parameters to the model.class.ts file</li><li> Add a blank route '' matched to the ModelUploadComponent and a route 'render' matched to component ModelRenderComponent of the app-routing.module.ts file</li><li> import { HttpClientModule } from '@angular/common/http' in the app.module.ts file</li><li> Import HTTPClient for get & post operations on json server & create functions to get & post data in the modelcr.service.ts file in src/app/services. Also get & set index to render one item at a time from list</li><li> Import modelcrservice to call post function in the model-upload.component.ts file in src/app/model/model-upload. convert the uploaded file into a base64 string to send to the database</li><li> Get the data to the ts file using two way data binding [(ngModel)] in the model-upload.component.html file in src/app/model/model-upload</li><li> Import modelcrservice to subscribe to get function in the model-list.component.ts file in src/app/model/model-list folder. Also send the index to the modelcrservice to set for render</li><li> Get the data from ts file using ngFor and loop list in the table in the model-list.component.html file in src/app/model/model-list</li><li> Install the Three.js library for rendering 3D models and add the type to package.json by typing the following commands</li><br/><code>npm install three<br/>npm i --save-dev @types/three</code></li><li> Add the 3D model rendering logic mainly scene, camera & render in the model-render.component.ts file in src/app/model/model-render folder. Also get the data by subscribing to get method of modelcrservice</li><li> Add the canvas to display the rendered object in the model-render.component.html file in src/app/model/model-render. Add a button to render on click action as the get method is asynchronous and getting the data may result in delays thus an error using ngOnInit or ngAfterInitView</li><li> Add a background image by entering the URL as a background-image property in the styles.css file</li></ol></p>"
        },
        {
            "project_name":"Create your own Learning Management System",
            "problem": "<p><strong>Description</strong><br/> Develop a Learning Management System with the following features <ul><li>Registration Control: The ability to monitor and customize the registration processes of elearning curriculum.</li> <li>Document Management: Upload and management of documents containing curricular content.</li> <li>Multiple device access: Delivery of course content over web-based interfaces such as desktops, phones or tablets.</li> <li>Course calendars: Creation and publication of course schedules, deadlines and tests.</li> <li>Registration of new courses: Creation of new courses and register the students.</li></ul>",
            "message": "<p class='text-white'>Click <a class='text-white' href='https://lmsnodejsapp.herokuapp.com/'><b>here</b></a> to go to the project.</p>",
            "screenshots":[],
            "code":"",
            "procedure":"<ul> <li>Create a folder called lms to store the backend files & folders by entering the following command in terminal<br/> <code>mkdir lms</code></li> <li>Enter into the lms folder by entering the following command in terminal<br/> <code>cd lms</code></li> <li>Initialize the directory by entering the following command in terminal<br/> <code>npm init -y</code></li> <li>Check the current versions of node & npm in the local system by entering the following command in terminal<br/> <code>node -v</code><br/> <code>npm -v</code></li> <li>The version of Node in the local machine is<strong>v16.13.0</strong> & The version of npm (node package manager) in the local machine is<strong>8.3.0</strong></li> <li>install the required packages (latest) by entering the following commands in the terminal<br/> <code>npm i --save mongodb express nodemon multer bootstrap pug</code><br/> <ul>     <li>Mongodb: connects to MongoDB collection & performs database operations</li>     <li>Express: connects to backend service to serve HTML & CSS files & JavaScript logic files and listens on a port specified by user</li>     <li>Nodemon: automatically incorporate changes to js files without the need to stop and restart the server each time a change is made to the files</li>     <li>Multer: uploads files to storage if mentioned, else as a file URL</li>     <li>Bootstrap: RWD (Responsive Web Design) & pre-defined CSS (SASS) styling formats</li>     <li>Pug: template engine used to render dynamic web pages</li> </ul></li> <li>add 'start': 'nodemon app.js' to 'scripts' section of package.json</li> <li>Start express by entering the following command in the terminal<br/> <code>npm start</code></li> <li>The homepage will be displayed in the browser at http://localhost:{port_number}</li> <li>Setup the routes<br/> Setup routing for user & course. The user route will contain all the routes for views like registration, login, edit user and navbar and the course route will contain all the routes for views like course update, course delete and dashboard. The routing will be added to app.js as middleware.</li> <li>Create the Models<br/> Setup the models for user & course. The model will structure the data while performing CRUD operations.</li> <li>Create the Static Views<br/> Create the static views in HTML (including forms) for all the tasks (registration & login, create user, create course, etc.)</li> <li>Create the Dynamic Views<br/> Dynamic views require a template engine like EJB or PUG. The HTML file has to be reformatted as PUG implements indentation instead of tags. Template engines can render dynamic content easily.</li> <li>Set the 'views' to 'dynamic' in the app.js file & provide the path to the pug files</li> <li>Create the controllers for user & course. This will include the various functions to perform CRUD from the form through the model template.</li> <li>Multer will be used as an addition to the route for courses in the POST method to upload images when the button is clicked. Logic is also provided to convert the file into a base64 string to send to the database.</li> <li>Create the Configuration file to connect to MongoDB<br/> This will contain details of the database URL, database name, collection names. To protect the database URL, .env file can be referenced which will reside only on the local system.</li> <li>Once connected to the database, the following message will be displayed in console<br/> <code>'Connected to MongoDB in Express'</code></li> <li>The API operations are performed using Postman, an API service (since only GET can be performed in browser). However, in this project, to maintain the security, APIs have been disabled. The data whatever is displayed in the pug files/website are the same that will be trasmitted over API.</li> </ul>"
        },
        {
            "project_name":"Online Music Store - Manage your personal Music library",
            "problem": "<p><strong>Description</stromg><br/>In this project, you are required to design an online music store that will enable the client to mobilize their business by allowing a customer to purchase different music related items directly from the website. The website should be dynamic and user centric to attract more customers that will eventually increase the revenue for the client</p>",
            "message": "<p class='text-white'>Development in Progress</p>",
            "screenshots":[

            ],
            "code":"",
            "procedure":""
        }
    ]
}